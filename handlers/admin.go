package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/aamarsel/browz/database"
	"gopkg.in/telebot.v3"
)

func HandleFutureBookings(c telebot.Context) error {
	appointments, err := database.GetBookingsByStatus("accepted")
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.")
	}

	if len(appointments) == 0 {
		return c.Send("–ù–µ—Ç –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.")
	}

	for _, booking := range appointments {
		msgText := fmt.Sprintf(
			"üìÖ *–î–∞—Ç–∞:* %s\n"+
				"üíÜ *–£—Å–ª—É–≥–∞:* %s\n"+
				"üë§ *–ö–ª–∏–µ–Ω—Ç:* %s\n",
			booking.DateTime.Format("02.01.2006 15:04"),
			booking.ServiceName,
			booking.ClientName,
		)
		c.Send(msgText, telebot.ModeMarkdown)
	}
	return nil
}

func HandlePendingBookings(c telebot.Context) error {
	appointments, err := database.GetBookingsByStatus("pending")
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.")
	}

	if len(appointments) == 0 {
		return c.Send("–ù–µ—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
	}

	for _, booking := range appointments {
		msgText := fmt.Sprintf(
			"üìÖ *–î–∞—Ç–∞:* %s\n"+
				"üíÜ *–£—Å–ª—É–≥–∞:* %s\n"+
				"üë§ *–ö–ª–∏–µ–Ω—Ç:* %s\n",
			booking.DateTime.Format("02.01.2006 15:04"),
			booking.ServiceName,
			booking.ClientName,
		)

		btns := &telebot.ReplyMarkup{}
		acceptBtn := btns.Data("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "accept_booking", booking.ID)
		declineBtn := btns.Data("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "decline_booking", booking.ID)

		btns.Inline(btns.Row(acceptBtn, declineBtn))

		c.Send(msgText, btns, telebot.ModeMarkdown)
	}
	return nil
}

func HandleAcceptBooking(c telebot.Context) error {
	bookingID := strings.Split(c.Data(), "|")[1]

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	booking, err := database.UpdateBookingStatus(bookingID, "accepted")
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
	notification := fmt.Sprintf(
		"‚úÖ *–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"+
			"*–î–∞—Ç–∞:* %s\n"+
			"*–í—Ä–µ–º—è:* %s\n"+
			"*–£—Å–ª—É–≥–∞:* %s\n\n"+
			"üìç –ñ–¥–µ–º –≤–∞—Å –≤–æ–≤—Ä–µ–º—è!",
		booking.DateTime.Format("02.01.2006"),
		booking.DateTime.Format("15:04"),
		booking.ServiceName,
	)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	id, _ := strconv.ParseInt(booking.ClientTelegramID, 10, 64)
	recipient := &telebot.User{ID: id}
	_, err = c.Bot().Send(recipient, notification, telebot.ModeMarkdown)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", err)
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	return c.Send("–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
}

func HandleDeclineBooking(c telebot.Context) error {
	bookingID := strings.Split(c.Data(), "|")[1]
	_, err := database.UpdateBookingStatus(bookingID, "cancelled")
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
	}
	return c.Send("–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå")
}
