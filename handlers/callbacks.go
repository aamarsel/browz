package handlers

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/aamarsel/browz/database"
	"github.com/aamarsel/browz/keyboards"
	"github.com/aamarsel/browz/models"
	"github.com/aamarsel/browz/utils"
	"gopkg.in/telebot.v3"
)

func CallbackHandler(c telebot.Context) error {
	callbackData := c.Callback().Data

	if strings.Contains(callbackData, "pick_date") {
		return DatePickerHandler(c)
	} else if strings.Contains(callbackData, "pick_slot") {
		return SlotPickerHandler(c)
	} else if strings.Contains(callbackData, "pick_service") {
		return ServicePickerHandler(c)
	} else if strings.Contains(callbackData, "confirm_booking") {
		return ConfirmBookingHandler(c)
	} else if strings.Contains(callbackData, "cancel_booking") {
		return HandleCancelBooking(c)
	} else {
		log.Println("–û—à–∏–±–∫–∞! –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback:", callbackData)
	}

	return nil
}

func DatePickerHandler(c telebot.Context) error {
	parts := strings.Split(c.Data(), "|")
	if len(parts) < 2 {
		return c.Send("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
	}

	selectedDate := parts[1]
	return keyboards.ShowTimeSlots(c, selectedDate)
}

func SlotPickerHandler(c telebot.Context) error {
	data := c.Data()
	userID := c.Sender().ID

	models.TempStorage[userID] = models.SelectedSlot{
		Date: data[:10],
		Time: data[11:],
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", &telebot.ReplyMarkup{
		InlineKeyboard: keyboards.GetServicesButtons(),
	})
}

func ServicePickerHandler(c telebot.Context) error {
	data := c.Data()
	serviceID, err := strconv.Atoi(strings.TrimPrefix(data, "pick_service:"))
	if err != nil {
		log.Println(err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	var name string
	var price int
	var duration time.Duration
	err = database.DB.QueryRow(
		context.Background(),
		"SELECT name, price, duration FROM services WHERE id = $1",
		serviceID,
	).Scan(&name, &price, &duration)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
	}

	userID := c.Sender().ID
	slot, exists := models.TempStorage[userID]
	if !exists {
		return c.Send("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —É—Å–ª—É–≥–∏.")
	}

	timeStr := slot.Time[11:]

	msg := fmt.Sprintf(
		"üìÖ –î–∞—Ç–∞: %s\nüíÜ‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: %s\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞: %s\nüí∞ –¶–µ–Ω–∞: %d —Ä—É–±\n\n"+
			"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –∑–∞–ø–∏—Å—å –∫ —Å–≤–æ–µ–º—É –ª—é–±–∏–º–æ–º—É –º–∞—Å—Ç–µ—Ä—É –ó—É—Ö—Ä–µ üòä",
		timeStr,
		name,
		utils.FormatDuration(duration),
		price,
	)

	btnYes := telebot.InlineButton{Text: "‚úÖ –î–∞", Data: fmt.Sprintf("confirm_booking|%d|%s", serviceID, timeStr)}
	btnNo := telebot.InlineButton{Text: "‚ùå –ù–µ—Ç", Data: "cancel_booking"}

	return c.Send(msg, &telebot.ReplyMarkup{
		InlineKeyboard: [][]telebot.InlineButton{{btnYes}, {btnNo}},
	})
}
