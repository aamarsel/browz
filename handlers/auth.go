package handlers

import (
	"log"

	"github.com/aamarsel/browz/database"
	"github.com/aamarsel/browz/keyboards"
	"github.com/aamarsel/browz/models"
	"gopkg.in/telebot.v3"
)

func StartHandler(c telebot.Context) error {
	userID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ –ë–î
	exists, err := database.ClientExists(userID)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	if exists {
		keyboards.SendMainMenu(c, "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
		return nil
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
	models.RegistrationStorage[userID] = models.RegistrationState{}
	models.UserState[userID] = models.StateAwaitingName

	return c.Send("üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
}

func ProcessNameInput(c telebot.Context) error {
	userID := c.Sender().ID
	name := c.Text()

	state := models.RegistrationStorage[userID]
	state.Name = name
	models.RegistrationStorage[userID] = state
	models.UserState[userID] = models.StateAwaitingContact

	contactBtn := telebot.ReplyButton{Text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", Contact: true}
	menu := &telebot.ReplyMarkup{
		ReplyKeyboard:   [][]telebot.ReplyButton{{contactBtn}},
		ResizeKeyboard:  true,
		OneTimeKeyboard: true,
	}

	return c.Send("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç:", menu)
}

func ContactHandler(c telebot.Context) error {
	userID := c.Sender().ID

	if c.Message().Contact == nil {
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞.")
	}

	phone := c.Message().Contact.PhoneNumber
	state := models.RegistrationStorage[userID]
	state.Phone = phone

	err := database.SaveClient(userID, state.Name, state.Phone)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	delete(models.RegistrationStorage, userID)
	models.UserState[userID] = models.StateNone

	keyboards.SendMainMenu(c, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
	return nil
}
