package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/aamarsel/browz/database"
	"github.com/aamarsel/browz/keyboards"
	"github.com/aamarsel/browz/models"
	"gopkg.in/telebot.v3"
)

func HandleEditServices(c telebot.Context) error {
	services, err := database.GetAllServices()
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥:", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥.")
	}

	if len(services) == 0 {
		return c.Send("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥.")
	}

	for _, service := range services {
		markup := &telebot.ReplyMarkup{}
		btnDelete := markup.Data("‚ùå –£–¥–∞–ª–∏—Ç—å", "delete_service", strconv.Itoa(service.ID))
		markup.Inline(markup.Row(btnDelete))

		durationMinutes := int(service.Duration.Minutes())

		text := fmt.Sprintf(
			"üõ† *%s*\nüí∞ –¶–µ–Ω–∞: %d ‚ÇΩ\n‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –º–∏–Ω",
			service.Name,
			service.Price,
			durationMinutes,
		)

		c.Send(text, markup)
	}

	return nil
}

func HandleDeleteService(c telebot.Context) error {
	serviceID, _ := strconv.Atoi(strings.Split(c.Data(), "|")[1])

	err := database.DeleteService(serviceID)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:", err)
		return c.Respond(&telebot.CallbackResponse{Text: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è."})
	}

	return c.Respond(&telebot.CallbackResponse{Text: "‚úÖ –£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞."})
}

func HandleAddService(c telebot.Context) error {
	userID := c.Sender().ID
	models.UserState[userID] = models.StateAwaitingServiceName

	return c.Send("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
}

func ProcessServiceName(c telebot.Context) error {
	userID := c.Sender().ID
	name := c.Text()

	models.TempServiceData[userID] = models.TempService{Name: name}
	models.UserState[userID] = models.StateAwaitingServicePrice

	return c.Send("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏ (–≤ —Ä—É–±–ª—è—Ö):")
}

func ProcessServicePrice(c telebot.Context) error {
	userID := c.Sender().ID
	price, err := strconv.Atoi(c.Text())
	if err != nil || price < 0 {
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö):")
	}

	models.TempServiceData[userID] = models.TempService{
		Name:  models.TempServiceData[userID].Name,
		Price: price,
	}
	models.UserState[userID] = models.StateAwaitingServiceDuration

	return c.Send("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:")
}

func ProcessServiceDuration(c telebot.Context) error {
	userID := c.Sender().ID
	duration, err := strconv.Atoi(c.Text())
	if err != nil || duration <= 0 {
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö):")
	}

	tempService := models.TempServiceData[userID]
	tempService.Duration = duration

	err = database.AddService(tempService)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:", err)
		return keyboards.SendMainMenu(c, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")
	}

	delete(models.TempServiceData, userID)
	delete(models.UserState, userID)

	return keyboards.SendMainMenu(c, "‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
}
