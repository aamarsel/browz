package scheduler

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aamarsel/browz/database"
	"github.com/go-co-op/gocron"
	"github.com/google/uuid"
	"gopkg.in/telebot.v3"
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
func CompleteOldBookings(bot *telebot.Bot) {
	now := time.Now()

	// –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä–∫—É –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è
	query := `
		SELECT b.id, b.client_id, b.service_id, s.name, sl.date, sl.time, s.duration, c.telegram_id, c.name
		FROM bookings b
		JOIN services s ON b.service_id = s.id
		JOIN available_slots sl ON b.slot_id = sl.id
		JOIN clients c ON b.client_id = c.id
		WHERE b.status = 'accepted'
	`

	rows, err := database.DB.Query(context.Background(), query)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:", err)
		return
	}
	defer rows.Close()

	// –ë—É—Ñ–µ—Ä–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ª–∞–π—Å, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
	var bookings []struct {
		BookingID        uuid.UUID
		ClientID         uuid.UUID
		ServiceID        int64
		ServiceName      string
		Date             time.Time
		TimeOfDay        time.Time
		Duration         time.Duration
		ClientTelegramID int64
		ClientName       string
	}

	for rows.Next() {
		var b struct {
			BookingID        uuid.UUID
			ClientID         uuid.UUID
			ServiceID        int64
			ServiceName      string
			Date             time.Time
			TimeOfDay        time.Time
			Duration         time.Duration
			ClientTelegramID int64
			ClientName       string
		}

		err := rows.Scan(&b.BookingID, &b.ClientID, &b.ServiceID, &b.ServiceName, &b.Date, &b.TimeOfDay, &b.Duration, &b.ClientTelegramID, &b.ClientName)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", err)
			continue
		}
		bookings = append(bookings, b)
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–æ–≤
	rows.Close()

	// –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
	for _, b := range bookings {
		// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Å–ª—É–≥–∏
		endTime := time.Date(b.Date.Year(), b.Date.Month(), b.Date.Day(), b.TimeOfDay.Hour(), b.TimeOfDay.Minute(), b.TimeOfDay.Second(), 0, time.UTC).Add(b.Duration)

		if now.After(endTime) {
			// –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
			tx, err := database.DB.Begin(context.Background())
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", err)
				continue
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "completed"
			_, err = tx.Exec(context.Background(),
				`UPDATE bookings SET status = 'completed' WHERE id = $1`, b.BookingID)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏:", err)
				tx.Rollback(context.Background()) // –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
				continue
			}

			// –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
			err = tx.Commit(context.Background())
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", err)
				continue
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
			message := fmt.Sprintf(
				"üå∏ *%s*, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —É—Å–ª—É–≥–∞–º–∏ –ó—É—Ö—Ä—ã!\n\n"+
					"–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è. üíï",
				b.ClientName,
			)

			recipient := &telebot.User{ID: b.ClientTelegramID}
			bot.Send(recipient, message, telebot.ModeMarkdown)
		}
	}
}

func StartScheduler(bot *telebot.Bot) {
	scheduler := gocron.NewScheduler(time.UTC)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å –≤ 00 –º–∏–Ω—É—Ç
	scheduler.Every(1).Hour().StartAt(time.Date(0, 0, 0, 0, 0, 0, 0, time.UTC)).Do(func() {
		CompleteOldBookings(bot)
	})
	scheduler.StartAsync()
}
