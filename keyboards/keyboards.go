package keyboards

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/aamarsel/browz/database"
	"gopkg.in/telebot.v3"
)

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
var MainMenu = &telebot.ReplyMarkup{}

var btnMyBookings = MainMenu.Text("üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
var btnNewBooking = MainMenu.Text("‚ûï –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ó—É—Ö—Ä–µ")
var btnFutureBookings = MainMenu.Text("üìÖ –ë—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏")
var btnPendingBookings = MainMenu.Text("‚è≥ –ù–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏")
var btnEditServices = MainMenu.Text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏")
var btnNewService = MainMenu.Text("‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")

func GetMainMenu(isAdmin bool) *telebot.ReplyMarkup {
	menu := &telebot.ReplyMarkup{}

	// –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	menu.Reply(
		menu.Row(btnMyBookings),
		menu.Row(btnNewBooking),
	)

	// –ï—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø. –∫–Ω–æ–ø–∫–∏
	if isAdmin {
		menu.Reply(
			menu.Row(btnFutureBookings),
			menu.Row(btnPendingBookings),
			menu.Row(btnMyBookings),
			menu.Row(btnNewBooking),
			menu.Row(btnEditServices),
			menu.Row(btnNewService),
		)
	}

	return menu
}

func SendMainMenu(c telebot.Context, text string) error {
	isAdmin := database.IsAdmin(fmt.Sprint(c.Sender().ID)) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑
	menu := GetMainMenu(isAdmin)
	return c.Send(text, menu)
}

// –ü–æ–∫–∞–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
func ShowDatePicker(c telebot.Context) error {
	today := time.Now()
	btns := &telebot.ReplyMarkup{}

	var rows []telebot.Row
	for i := 0; i < 7; i++ {
		date := today.AddDate(0, 0, i)
		btn := btns.Data(date.Format("02.01.2006"), "pick_date", date.Format("2006-01-02"))
		rows = append(rows, btns.Row(btn))
	}

	btns.Inline(rows...)
	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è:", btns)
}

// –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
func ShowTimeSlots(c telebot.Context, date string) error {
	slots, err := database.GetAvailableSlots(date)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
	}
	if len(slots) == 0 {
		c.Send("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å")
		return ShowDatePicker(c)
	}

	btns := &telebot.ReplyMarkup{ResizeKeyboard: true}
	var rows []telebot.Row
	for _, slot := range slots {
		btn := btns.Data(slot, "pick_slot", date+" "+slot)
		rows = append(rows, telebot.Row{btn})
	}
	btns.Inline(rows...)
	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", btns)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å —É—Å–ª—É–≥–∞–º–∏
func GetServicesButtons() [][]telebot.InlineButton {
	rows, err := database.DB.Query(context.Background(), "SELECT id, name, price, duration FROM services")
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥:", err)
		return nil
	}
	defer rows.Close()

	var buttons [][]telebot.InlineButton
	for rows.Next() {
		var id int
		var name string
		var price int
		var duration time.Duration
		err := rows.Scan(&id, &name, &price, &duration)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ —É—Å–ª—É–≥–∏:", err)
			continue
		}

		btn := telebot.InlineButton{
			Text: fmt.Sprintf("%s, %s, %d —Ä—É–±", name, formatDuration(duration), price),
			Data: fmt.Sprintf("pick_service:%d", id),
		}
		buttons = append(buttons, []telebot.InlineButton{btn})
	}
	return buttons
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
func formatDuration(d time.Duration) string {
	hours := int(d.Hours())
	minutes := int(d.Minutes()) % 60
	if minutes == 0 {
		return fmt.Sprintf("%d —á", hours)
	}
	return fmt.Sprintf("%d —á %d –º–∏–Ω", hours, minutes)
}
