package bot

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"gopkg.in/telebot.v3"

	"github.com/aamarsel/browz/database"
)

var daysOfWeek = map[time.Weekday]string{
	time.Monday:    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
	time.Tuesday:   "–≤—Ç–æ—Ä–Ω–∏–∫",
	time.Wednesday: "—Å—Ä–µ–¥–∞",
	time.Thursday:  "—á–µ—Ç–≤–µ—Ä–≥",
	time.Friday:    "–ø—è—Ç–Ω–∏—Ü–∞",
	time.Saturday:  "—Å—É–±–±–æ—Ç–∞",
	time.Sunday:    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}

func showDatePicker(c telebot.Context) error {
	today := time.Now()
	btns := &telebot.ReplyMarkup{}

	var rows []telebot.Row
	for i := 0; i < 7; i++ {
		date := today.AddDate(0, 0, i)
		btn := btns.Data(date.Format("02.01.2006"), "pick_date", date.Format("2006-01-02"))
		rows = append(rows, btns.Row(btn))
	}

	btns.Inline(rows...)

	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è:", btns)
}

func DatePickerHandler(c telebot.Context) error {
	parts := strings.Split(c.Data(), "|")
	if len(parts) < 2 {
		return c.Send("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
	}

	selectedDate := parts[1]
	return showTimeSlots(c, selectedDate)
}

func showTimeSlots(c telebot.Context, date string) error {
	slots, err := getAvailableSlots(date)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
	}
	if len(slots) == 0 {
		c.Send("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å")
		return showDatePicker(c)
	}

	btns := &telebot.ReplyMarkup{ResizeKeyboard: true}
	var rows []telebot.Row
	for _, slot := range slots {
		btn := btns.Data(slot, "pick_slot", date+" "+slot)
		rows = append(rows, telebot.Row{btn})
	}
	btns.Inline(rows...)

	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, —É–¥–æ–±–Ω–æ–µ –¥–ª—è –∑–∞–ø–∏—Å–∏. –í—Å–µ —Å–ª–æ—Ç—ã –≤–Ω–∏–∑—É - —Å–≤–æ–±–æ–¥–Ω—ã–µ:", btns)
}

func SlotPickerHandler(c telebot.Context) error {
	data := c.Data()
	userID := c.Sender().ID

	tempStorage[userID] = SelectedSlot{
		Date: data[:10],
		Time: data[11:],
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
	return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", &telebot.ReplyMarkup{
		InlineKeyboard: GetServicesButtons(),
	})
}

func getAvailableSlots(date string) ([]string, error) {
	var slots []string
	query := `
		SELECT s.date, s.time 
		FROM available_slots s
		LEFT JOIN bookings b ON s.id = b.slot_id
		WHERE s.date = $1 
		  AND s.is_active = TRUE 
		  AND b.id IS NULL  
		ORDER BY s.time;
	`

	rows, err := database.DB.Query(context.Background(), query, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	for rows.Next() {
		var slotDate time.Time
		var slotTime string

		if err := rows.Scan(&slotDate, &slotTime); err != nil {
			return nil, err
		}

		// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
		parsedTime, err := time.Parse("15:04:05", slotTime)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏:", err)
			continue
		}

		// –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
		dayOfWeek := daysOfWeek[slotDate.Weekday()]

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º: 20.03.2025, 08:00, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
		formatted := fmt.Sprintf("%02d.%02d.%d, %02d:%02d, %s",
			slotDate.Day(), slotDate.Month(), slotDate.Year(),
			parsedTime.Hour(), parsedTime.Minute(),
			dayOfWeek,
		)

		slots = append(slots, formatted)
	}
	return slots, nil
}

func GetServicesButtons() [][]telebot.InlineButton {
	rows, err := database.DB.Query(context.Background(), "SELECT id, name, price, duration FROM services")
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥:", err)
		return nil
	}
	defer rows.Close()

	var buttons [][]telebot.InlineButton
	for rows.Next() {
		var id int
		var name string
		var price int
		var duration time.Duration
		err := rows.Scan(&id, &name, &price, &duration)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ —É—Å–ª—É–≥–∏:", err)
			continue
		}

		btn := telebot.InlineButton{
			Text: fmt.Sprintf("%s, %s, %d —Ä—É–±", name, formatDuration(duration), price),
			Data: fmt.Sprintf("pick_service:%d", id),
		}
		buttons = append(buttons, []telebot.InlineButton{btn})
	}
	return buttons
}

func formatDuration(d time.Duration) string {
	hours := int(d.Hours())
	minutes := int(d.Minutes()) % 60
	if minutes == 0 {
		return fmt.Sprintf("%d —á", hours)
	}
	return fmt.Sprintf("%d —á %d –º–∏–Ω", hours, minutes)
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
var MainMenu = &telebot.ReplyMarkup{}

var btnMyBookings = MainMenu.Text("üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
var btnNewBooking = MainMenu.Text("‚ûï –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ó—É—Ö—Ä–µ")

func InitKeyboards() {
	MainMenu.Reply(
		MainMenu.Row(btnMyBookings),
		MainMenu.Row(btnNewBooking),
	)
}
