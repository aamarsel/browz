package bot

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"gopkg.in/telebot.v3"

	"github.com/aamarsel/browz/auth"
	"github.com/aamarsel/browz/database"
)

func StartHandler(c telebot.Context) error {
	return c.Send("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±—Ä–æ–≤–∏. –í–≤–µ–¥–∏—Ç–µ /book –¥–ª—è –∑–∞–ø–∏—Å–∏.")
}

func BookHandler(c telebot.Context) error {
	return showDatePicker(c)
}

func CallbackHandler(c telebot.Context) error {
	callbackData := c.Callback().Data

	if strings.Contains(callbackData, "pick_date") {
		return DatePickerHandler(c)
	} else if strings.Contains(callbackData, "pick_slot") {
		return SlotPickerHandler(c)
	} else {
		log.Println("–û—à–∏–±–∫–∞! –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback")
	}

	return nil
}

func ProcessBooking(c telebot.Context) error {
	data := strings.Fields(c.Text())
	if len(data) < 4 {
		return c.Send("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –¢–µ–ª–µ—Ñ–æ–Ω –î–∞—Ç–∞ –í—Ä–µ–º—è (–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞ +79998887766 2025-03-20 14:00)")
	}

	name, phone, date, time := data[0], data[1], data[2], data[3]

	_, err := database.DB.Exec(context.Background(),
		"INSERT INTO appointments (client_name, phone, appointment_date, appointment_time) VALUES ($1, $2, $3, $4)",
		name, phone, date, time)

	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î:", err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
	}

	return c.Send(fmt.Sprintf("‚úÖ %s, –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ %s –≤ %s!", name, date, time))
}

func ListAppointments(c telebot.Context) error {
	if !auth.IsAdmin(c.Sender().ID) {
		return c.Send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
	}

	rows, err := database.DB.Query(context.Background(), `
        SELECT id, client_name, appointment_time FROM appointments
        ORDER BY appointment_time ASC
    `)
	if err != nil {
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")
	}
	defer rows.Close()

	var result string
	for rows.Next() {
		var id int
		var clientName string
		var appointmentTime time.Time
		err := rows.Scan(&id, &clientName, &appointmentTime)
		if err != nil {
			return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
		}
		result += fmt.Sprintf("üìÖ %s | %s\n", appointmentTime.Format("02.01.2006 15:04"), clientName)
	}

	if result == "" {
		return c.Send("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
	}

	return c.Send(result)
}
