package bot

import (
	"context"
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"gopkg.in/telebot.v3"

	"github.com/aamarsel/browz/auth"
	"github.com/aamarsel/browz/database"
)

func StartHandler(c telebot.Context) error {
	userID := c.Sender().ID

	var exists bool
	err := database.DB.QueryRow(context.Background(),
		"SELECT EXISTS(SELECT 1 FROM clients WHERE telegram_id = $1)", userID).Scan(&exists)

	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	if exists {
		// –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		return c.Send("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", MainMenu)
	}

	// –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
	registrationStorage[userID] = RegistrationState{Name: "", Phone: ""}
	userState[userID] = StateAwaitingName
	return c.Send("üëã –ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±—Ä–æ–≤–∏ –∫ –º–∞—Å—Ç–µ—Ä—É –ó—É—Ö—Ä–µ.\n–î–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
}

func processNameInput(c telebot.Context) error {
	userID := c.Sender().ID
	name := c.Text()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	state := registrationStorage[userID]
	state.Name = name
	registrationStorage[userID] = state

	// –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userState[userID] = StateAwaitingContact

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
	contactBtn := telebot.ReplyButton{Text: "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", Contact: true}
	menu := &telebot.ReplyMarkup{
		ReplyKeyboard:   [][]telebot.ReplyButton{{contactBtn}},
		ResizeKeyboard:  true,
		OneTimeKeyboard: true,
	}
	return c.Send("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", menu)
}

func ContactHandler(c telebot.Context) error {
	userID := c.Sender().ID

	if c.Message().Contact == nil {
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
	}

	phone := c.Message().Contact.PhoneNumber
	state := registrationStorage[userID]
	state.Phone = phone

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ
	_, err := database.DB.Exec(context.Background(),
		"INSERT INTO clients (telegram_id, name, phone) VALUES ($1, $2, $3)",
		userID, state.Name, state.Phone)

	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:", err)
		return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	// –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	delete(tempStorage, userID)

	return c.Send("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", MainMenu)
}

func BookHandler(c telebot.Context) error {
	return showDatePicker(c)
}

func CallbackHandler(c telebot.Context) error {
	callbackData := c.Callback().Data

	if strings.Contains(callbackData, "pick_date") {
		return DatePickerHandler(c)
	} else if strings.Contains(callbackData, "pick_slot") {
		return SlotPickerHandler(c)
	} else if strings.Contains(callbackData, "pick_service") {
		return ServicePickerHandler(c)
	} else if strings.Contains(callbackData, "confirm_booking") {
		return ConfirmBookingHandler(c)
	} else if strings.Contains(callbackData, "cancel_booking") {
		return BookHandler(c)
	} else {
		log.Println("–û—à–∏–±–∫–∞! –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback:", callbackData)
	}

	return nil
}

func ListAppointments(c telebot.Context) error {
	if !auth.IsAdmin(c.Sender().ID) {
		return c.Send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
	}

	rows, err := database.DB.Query(context.Background(), `
        SELECT id, client_name, appointment_time FROM appointments
        ORDER BY appointment_time ASC
    `)
	if err != nil {
		return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")
	}
	defer rows.Close()

	var result string
	for rows.Next() {
		var id int
		var clientName string
		var appointmentTime time.Time
		err := rows.Scan(&id, &clientName, &appointmentTime)
		if err != nil {
			return c.Send("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
		}
		result += fmt.Sprintf("üìÖ %s | %s\n", appointmentTime.Format("02.01.2006 15:04"), clientName)
	}

	if result == "" {
		return c.Send("üì≠ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
	}

	return c.Send(result)
}

func ServicePickerHandler(c telebot.Context) error {
	data := c.Data()
	serviceID, err := strconv.Atoi(strings.TrimPrefix(data, "pick_service:"))
	if err != nil {
		log.Println(err)
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	var name string
	var price int
	var duration time.Duration
	err = database.DB.QueryRow(
		context.Background(),
		"SELECT name, price, duration FROM services WHERE id = $1",
		serviceID,
	).Scan(&name, &price, &duration)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
	}

	userID := c.Sender().ID
	slot, exists := tempStorage[userID]
	if !exists {
		return c.Send("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —É—Å–ª—É–≥–∏.")
	}

	timeStr := slot.Time[11:]

	msg := fmt.Sprintf(
		"üìÖ –î–∞—Ç–∞: %s\nüíÜ‚Äç‚ôÄÔ∏è –£—Å–ª—É–≥–∞: %s\n‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞: %s\nüí∞ –¶–µ–Ω–∞: %d —Ä—É–±\n\n"+
			"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—é –∑–∞–ø–∏—Å—å –∫ —Å–≤–æ–µ–º—É –ª—é–±–∏–º–æ–º—É –º–∞—Å—Ç–µ—Ä—É –ó—É—Ö—Ä–µ üòä",
		timeStr,
		name,
		formatDuration(duration),
		price,
	)

	btnYes := telebot.InlineButton{Text: "‚úÖ –î–∞", Data: fmt.Sprintf("confirm_booking|%d|%s", serviceID, timeStr)}
	btnNo := telebot.InlineButton{Text: "‚ùå –ù–µ—Ç", Data: "cancel_booking"}

	return c.Send(msg, &telebot.ReplyMarkup{
		InlineKeyboard: [][]telebot.InlineButton{{btnYes}, {btnNo}},
	})
}

func ConfirmBookingHandler(c telebot.Context) error {
	data := c.Data()
	parts := strings.Split(data, "|")
	if len(parts) < 3 {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
	}

	serviceID, _ := strconv.Atoi(parts[1])
	date := parts[2][:10]
	parsedDate, _ := time.Parse("02.01.2006", date)
	formattedDate := parsedDate.Format("2006-01-02")
	parsedTime, _ := time.Parse("15:04", parts[2][12:17])
	formattedTime := parsedTime.Format("15:04:00")
	userID := c.Sender().ID

	var slotID int
	err := database.DB.QueryRow(
		context.Background(),
		"SELECT id FROM available_slots WHERE date = $1 AND time = $2 AND is_active = TRUE AND NOT EXISTS (SELECT 1 FROM bookings WHERE slot_id = available_slots.id)",
		formattedDate,
		formattedTime,
	).Scan(&slotID)
	if err != nil {
		return c.Send("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
	}

	_, err = database.DB.Exec(
		context.Background(),
		"INSERT INTO bookings (client_id, slot_id, service_id) VALUES ((SELECT id FROM clients WHERE telegram_id = $1), $2, $3)",
		userID, slotID, serviceID,
	)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}

	return c.Send("‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É –ó—É—Ö—Ä–µ. –û–∂–∏–¥–∞–π—Ç–µ, –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.", &telebot.ReplyMarkup{ReplyKeyboard: MainMenu.ReplyKeyboard})
}

func MessageHandler(c telebot.Context) error {
	userID := c.Sender().ID

	switch userState[userID] {
	case StateAwaitingName:
		return processNameInput(c) // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏

	default:
		switch c.Text() {
		case "‚ûï –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –ó—É—Ö—Ä–µ":
			return showDatePicker(c)
		default:
			return c.Send("–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", &telebot.ReplyMarkup{ReplyKeyboard: MainMenu.ReplyKeyboard})
		}
	}
}
